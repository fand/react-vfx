{"version":3,"sources":["gl/Triangle.tsx","gl/Fragments.tsx","gl/Effects.tsx","Bg.tsx","dom/Frame.tsx","dom/LogoSection.tsx","dom/IntroSection.tsx","dom/ExamplesSection.tsx","dom/InputSection.tsx","dom/AuthorSection.tsx","dom/Code.tsx","App.tsx","index.tsx","../../src/context.ts","../../src/provider.tsx","../../src/vfx-player.ts","../../src/dom-to-canvas.ts","../../src/constants.ts","../../src/gif.ts","../../../src/gifuct-js/index.js","../../../src/gifuct-js/gif.js","../../../src/gifuct-js/dataparser.js","../../../src/gifuct-js/bytestream.js","../../../src/gifuct-js/schema.js","../../../src/gifuct-js/parsers.js","../../src/image.tsx","../../src/video.tsx","../../src/element.tsx","../../src/index.ts"],"names":["Triangle","scroll","ref","useRef","size","isMobile","useFrame","r","current","undefined","rotation","y","z","position","set","getValue","attach","args","randomRange","min","max","diff","Math","random","Particle","geometry","material","x","d","sqrt","useEffect","sx","sy","sz","scale","a","floor","PI","Fragments","count","groupRef","useResource","geometryRef","materialRef","window","s","Date","now","Array","fill","map","_","index","key","Effects","composer","useThree","scene","gl","camera","setSize","width","height","render","attachArray","FXAAShader","material-uniforms-resolution-value","renderToScreen","extend","EffectComposer","ShaderPass","RenderPass","canvasStyle","top","left","zIndex","pointerEvents","Bg","background","THREE","useSpring","onScroll","useCallback","e","scrollY","interpolate","document","body","scrollHeight","innerHeight","addEventListener","removeEventListener","style","colors","Frame","props","useState","borderColor","setBorderColor","boxShadow","setBoxShadow","interval","id","setInterval","color","length","clearInterval","className","LogoSection","src","shader","IntroSection","display","ExamplesSection","role","aria-label","autoPlay","loop","muted","playsInline","InputSection","text","setText","debouncedText","setDebouncedText","update","fontSize","fontWeight","value","onChange","target","type","onClick","AuthorSection","href","rel","SyntaxHighlighter","registerLanguage","jsx","Frag","children","maxWidth","margin","Code","language","darcula","customStyle","InlineCode","PreTag","App","pixelRatio","dedent","fontStyle","uniforms","vhCheck","ReactDOM","getElementById","canvas","this","range","doc","createRange","selectNodeContents","documentElement","deleteContents","appendChild","frame","image","descriptor","ByteStream","prototype","peekByte","label","codes","stream","peekBytes","parts","parser","Parsers","readBytes","skip","readByte","subBlocks"],"mappings":"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","file":"static/js/main.f6adc777.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport { OpaqueInterpolation } from \"react-spring\";\nimport { isMobile } from \"is-mobile\";\n\ntype TriangleProps = {\n    scroll: OpaqueInterpolation<number>;\n};\n\nfunction Triangle({ scroll }: TriangleProps) {\n    const ref = useRef<THREE.Mesh>();\n\n    const size = isMobile() ? 7 : 13;\n\n    useFrame(() => {\n        const r = ref.current;\n        if (r === undefined) {\n            return;\n        }\n        r.rotation.y += 0.004;\n        r.rotation.z += 0.01;\n\n        r.position.set(0, scroll.getValue() * 300 - 7, -15);\n    });\n\n    return (\n        <mesh ref={ref}>\n            <torusBufferGeometry attach=\"geometry\" args={[size, 1, 2, 3]} />\n            <meshNormalMaterial attach=\"material\" />\n        </mesh>\n    );\n}\n\nexport default Triangle;\n","import React, { useRef, useEffect } from \"react\";\nimport { useFrame, useResource } from \"react-three-fiber\";\nimport { OpaqueInterpolation } from \"react-spring\";\nimport { isMobile } from \"is-mobile\";\n\nfunction randomRange(min: number, max: number): number {\n    const diff = max - min;\n    return Math.random() * diff + min;\n}\n\nfunction Particle({ geometry, material }: any) {\n    let ref = useRef<THREE.Mesh>();\n\n    let x = randomRange(-50, 50);\n    let y = randomRange(-140, 100);\n    let z = randomRange(-50, 50);\n\n    let d = Math.sqrt(x * x + z * z);\n    const r = 30;\n    if (d < r) {\n        x *= r / d;\n        z *= r / d;\n        d = 30;\n    }\n\n    const size = isMobile() ? 18 : 12;\n\n    useEffect(() => {\n        if (ref.current === undefined) {\n            return;\n        }\n\n        const sx = Math.random() * size;\n        const sy = Math.random() * size;\n        const sz = Math.random() * size;\n        ref.current.scale.set(sx, sy, sz);\n\n        const a = Math.floor(sx * 900) * Math.PI * 0.5;\n        ref.current.rotation.set(a, a, a);\n\n        ref.current.position.set(x, y, z);\n    }, [size, x, y, z]);\n\n    return <mesh ref={ref} material={material} geometry={geometry} />;\n}\n\ntype FragmentsProps = {\n    count: number;\n    scroll: OpaqueInterpolation<number>;\n};\n\nfunction Fragments({ count, scroll }: FragmentsProps) {\n    const groupRef = useRef<THREE.Group>();\n    const [geometryRef, geometry] = useResource();\n    const [materialRef, material] = useResource();\n\n    useFrame(() => {\n        if (groupRef.current === undefined) {\n            return;\n        }\n        if (typeof window === \"undefined\") {\n            return;\n        }\n\n        const s = scroll.getValue();\n        groupRef.current.position.set(0, s * 100 - 50, 0);\n        groupRef.current.rotation.set(0, Date.now() / 8000 + s * 5, 0);\n    });\n\n    return (\n        <>\n            <boxBufferGeometry ref={geometryRef} args={[0.00001, 1, 1]} />\n            <meshDepthMaterial ref={materialRef} />\n            <group ref={groupRef}>\n                {geometry &&\n                    new Array(count)\n                        .fill(0)\n                        .map((_, index) => (\n                            <Particle\n                                key={index}\n                                material={material}\n                                geometry={geometry}\n                            />\n                        ))}\n            </group>\n        </>\n    );\n}\n\nexport default Fragments;\n","import React, { useRef, useEffect } from \"react\";\r\nimport { extend, useThree, useFrame } from \"react-three-fiber\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\r\nimport { FXAAShader } from \"three/examples/jsm/shaders/FXAAShader\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\n\r\nextend({\r\n    EffectComposer,\r\n    ShaderPass,\r\n    RenderPass\r\n});\r\n\r\nexport default function Effects() {\r\n    const composer = useRef<EffectComposer>();\r\n    const { scene, gl, size, camera } = useThree();\r\n\r\n    useEffect(() => {\r\n        if (composer.current === undefined) {\r\n            return;\r\n        }\r\n\r\n        composer.current.setSize(size.width, size.height);\r\n    }, [size]);\r\n\r\n    useFrame(() => {\r\n        if (composer.current === undefined) {\r\n            return;\r\n        }\r\n\r\n        composer.current.render();\r\n    }, 2);\r\n\r\n    return (\r\n        <effectComposer ref={composer} args={[gl]}>\r\n            <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n            <shaderPass\r\n                attachArray=\"passes\"\r\n                args={[FXAAShader]}\r\n                material-uniforms-resolution-value={[\r\n                    1 / size.width,\r\n                    1 / size.height\r\n                ]}\r\n                renderToScreen\r\n            />\r\n        </effectComposer>\r\n    );\r\n}\r\n","import React, { useEffect, useCallback } from \"react\";\nimport { Canvas, useFrame, useThree } from \"react-three-fiber\";\nimport { useSpring } from \"react-spring\";\nimport { isMobile } from \"is-mobile\";\nimport * as THREE from \"three\";\nimport Triangle from \"./gl/Triangle\";\nimport Fragments from \"./gl/Fragments\";\nimport Effects from \"./gl/Effects\";\n\nconst canvasStyle = {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    width: \"100vw\",\n    height: \"100vh\",\n    zIndex: -1,\n    pointerEvents: \"none\"\n};\n\nfunction Bg() {\n    const { scene, camera } = useThree();\n    scene.background = new THREE.Color(0x222222);\n\n    const [{ scroll }, set] = useSpring(() => ({ scroll: 0 }));\n    const onScroll = useCallback(e => set({ scroll: window.scrollY }), [set]);\n\n    const top = scroll.interpolate(x => {\n        if (typeof window === \"undefined\" || typeof document === \"undefined\") {\n            return 0;\n        }\n        return x / (document.body.scrollHeight - window.innerHeight);\n    });\n\n    useEffect(() => {\n        if (typeof window === \"undefined\" || typeof document === \"undefined\") {\n            return;\n        }\n\n        window.addEventListener(\"scroll\", onScroll);\n\n        return () => {\n            window.removeEventListener(\"scroll\", onScroll);\n        };\n    }, [onScroll]);\n\n    useFrame(() => {\n        const s = top.getValue();\n        camera.rotation.set(-Math.PI * 0.1 - s * Math.PI * 0.4, 0, 0);\n    });\n\n    return (\n        <>\n            <Triangle scroll={top} />\n            <Fragments count={isMobile() ? 800 : 1500} scroll={top} />\n        </>\n    );\n}\n\nexport default () => (\n    <Canvas style={canvasStyle as any}>\n        <Effects />\n        <Bg />\n    </Canvas>\n);\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Frame.css\";\r\n\r\nconst colors = [\"#00FFEE\", \"#00FF99\", \"#0099FF\", \"#9900FF\", \"#FF0099\"];\r\n\r\ntype Props = {\r\n    interval?: number;\r\n};\r\n\r\nconst Frame: React.FC<Props> = (props: Props) => {\r\n    const [borderColor, setBorderColor] = useState(\"#00FFEE\");\r\n    const [boxShadow, setBoxShadow] = useState(\"inset 0 0 10px #00FFEE\");\r\n    const interval = props.interval || 5000;\r\n\r\n    useEffect(() => {\r\n        let count = 0;\r\n        const id = setInterval(() => {\r\n            const color = colors[count++ % colors.length];\r\n            setBorderColor(color);\r\n            setBoxShadow(`inset 0 0 10px ${color}`);\r\n        }, interval);\r\n\r\n        return () => {\r\n            clearInterval(id);\r\n        };\r\n    }, [interval]);\r\n\r\n    return <div className=\"Frame\" style={{ borderColor, boxShadow }}></div>;\r\n};\r\n\r\nexport default Frame;\r\n","import React from \"react\";\nimport * as VFX from \"react-vfx\";\nimport \"./LogoSection.css\";\n\nconst LogoSection: React.FC = () => {\n    return (\n        <section className=\"LogoSection\">\n            <VFX.VFXImg className=\"logo\" src=\"logo.png\" shader={\"rgbShift\"} />\n        </section>\n    );\n};\nexport default LogoSection;\n","import React from \"react\";\nimport * as VFX from \"react-vfx\";\nimport \"./IntroSection.css\";\n\nconst IntroSection: React.FC = () => {\n    return (\n        <section className=\"IntroSection\">\n            <p>\n                <VFX.VFXImg src=\"./logo-oneline.png\" shader=\"rgbGlitch\" /> is a{\" \"}\n                <VFX.VFXImg src=\"./react-logo-oneline.png\" shader=\"rainbow\" />{\" \"}\n                component library. It allows you to add{\" \"}\n                <VFX.VFXImg src=\"./webgl-logo.png\" shader=\"spring\" /> powered\n                effects to your{\" \"}\n                <VFX.VFXImg src=\"./react-logo-oneline.png\" shader=\"rainbow\" />{\" \"}\n                application. You can easily add{\" \"}\n                <VFX.VFXSpan style={{ display: \"block\" }} shader=\"glitch\">\n                    glitched images,{\" \"}\n                </VFX.VFXSpan>\n                <VFX.VFXSpan style={{ display: \"block\" }} shader=\"sinewave\">\n                    stylized videos\n                </VFX.VFXSpan>{\" \"}\n                and\n                <VFX.VFXSpan style={{ display: \"block\" }} shader=\"shine\">\n                    {\" \"}\n                    shiny texts{\" \"}\n                </VFX.VFXSpan>\n                to your website!!\n            </p>\n        </section>\n    );\n};\n\nexport default IntroSection;\n","import React from \"react\";\nimport LazyLoad from \"react-lazyload\";\nimport * as VFX from \"react-vfx\";\nimport \"./ExamplesSection.css\";\n\nconst ExamplesSection: React.FC = () => {\n    return (\n        <section className=\"ExamplesSection\">\n            <h2 id=\"examples\">Examples</h2>\n            <section>\n                <h3>Add effects to your images!!</h3>\n                <div className=\"ImgContainer\">\n                    <LazyLoad height={320}>\n                        <VFX.VFXImg src=\"react-logo.png\" shader=\"rainbow\" />\n                    </LazyLoad>\n                    <LazyLoad height={320}>\n                        <VFX.VFXImg src=\"david.png\" shader=\"rgbShift\" />\n                    </LazyLoad>\n                </div>\n            </section>\n            <section>\n                <h3>\n                    <span role=\"img\" aria-label=\"zap\">\n                        ⚡\n                    </span>\n                    Animated GIFs are also supported!!\n                    <span role=\"img\" aria-label=\"zap\">\n                        ⚡\n                    </span>\n                </h3>\n                <div className=\"ImgContainer\">\n                    <LazyLoad height={320}>\n                        <VFX.VFXImg src=\"chill.gif\" shader=\"sinewave\" />\n                    </LazyLoad>\n                    <LazyLoad height={320}>\n                        <VFX.VFXImg src=\"octocat.gif\" shader=\"glitch\" />\n                    </LazyLoad>\n                    <LazyLoad height={320}>\n                        <VFX.VFXImg src=\"cat.gif\" shader=\"rainbow\" />\n                    </LazyLoad>\n                    <LazyLoad height={320}>\n                        <VFX.VFXImg src=\"doge.gif\" shader=\"pixelate\" />\n                    </LazyLoad>\n                </div>\n            </section>\n            <section>\n                <h3>Videos work well!</h3>\n                <LazyLoad height={320}>\n                    <VFX.VFXVideo\n                        src=\"mind_blown.mp4\"\n                        shader=\"halftone\"\n                        autoPlay\n                        loop\n                        muted\n                        playsInline\n                    />\n                </LazyLoad>\n            </section>\n            <section className=\"VFXSpanExample\">\n                <VFX.VFXSpan shader=\"sinewave\">\n                    You can also add effects to <br />\n                    plain text!!!!!\n                </VFX.VFXSpan>\n            </section>\n            <section>\n                <h3>... and make Transition Effects!</h3>\n                <VFX.VFXImg shader=\"warpTransition\" src=\"logo.png\" />\n                <br />\n                <VFX.VFXImg shader=\"slitScanTransition\" src=\"logo.png\" />\n                <br />\n                <VFX.VFXImg shader=\"pixelateTransition\" src=\"logo.png\" />\n                <br />\n            </section>\n        </section>\n    );\n};\n\nexport default ExamplesSection;\n","import React, { useState, useCallback } from \"react\";\r\nimport * as VFX from \"react-vfx\";\r\nimport \"./InputSection.css\";\r\n\r\nconst InputSection: React.FC = () => {\r\n    const [text, setText] = useState(\"Try editing text!\");\r\n    const [debouncedText, setDebouncedText] = useState(text);\r\n\r\n    const update = useCallback(() => {\r\n        setDebouncedText(text);\r\n    }, [text]);\r\n\r\n    return (\r\n        <section className=\"InputSection\">\r\n            <p style={{ fontSize: \"48px\", fontWeight: \"bold\" }}>\r\n                <VFX.VFXSpan shader=\"rainbow\">{debouncedText}</VFX.VFXSpan>\r\n            </p>\r\n            <textarea\r\n                value={text}\r\n                onChange={e => setText(e.target.value)}\r\n            ></textarea>\r\n            <button type=\"button\" onClick={update}>\r\n                <VFX.VFXSpan shader=\"rainbow\">FIRE</VFX.VFXSpan>\r\n            </button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default InputSection;\r\n","import React from \"react\";\r\nimport * as VFX from \"react-vfx\";\r\nimport \"./AuthorSection.css\";\r\n\r\nconst AuthorSection: React.FC = () => {\r\n    return (\r\n        <section className=\"AuthorSection\">\r\n            <a\r\n                href=\"https://twitter.com/amagitakayosi\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                <VFX.VFXImg\r\n                    className=\"icon\"\r\n                    src=\"./amagi.png\"\r\n                    shader=\"glitch\"\r\n                />\r\n                <h3 className=\"name\">Made by AMAGI</h3>\r\n            </a>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AuthorSection;\r\n","import React from \"react\";\r\n\r\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport jsx from \"react-syntax-highlighter/dist/esm/languages/prism/jsx\";\r\nimport { darcula } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\n\r\nSyntaxHighlighter.registerLanguage(\"jsx\", jsx);\r\n\r\nconst Frag = ({ children }: any) => <>{children}</>;\r\n\r\nconst style = {\r\n    fontSize: \"20px\",\r\n    width: \"960px\",\r\n    maxWidth: \"calc(100% - 40px)\",\r\n    margin: \"0 auto\"\r\n};\r\n\r\nexport const Code = ({ children }: any) => (\r\n    <SyntaxHighlighter language=\"jsx\" style={darcula} customStyle={style}>\r\n        {children}\r\n    </SyntaxHighlighter>\r\n);\r\n\r\nexport const InlineCode = ({ children }: any) => (\r\n    <SyntaxHighlighter\r\n        language=\"jsx\"\r\n        style={darcula}\r\n        customStyle={style}\r\n        PreTag={Frag}\r\n    >\r\n        {children}\r\n    </SyntaxHighlighter>\r\n);\r\n","import React from \"react\";\nimport * as VFX from \"react-vfx\";\nimport dedent from \"dedent\";\nimport Bg from \"./Bg\";\nimport Frame from \"./dom/Frame\";\nimport LogoSection from \"./dom/LogoSection\";\nimport IntroSection from \"./dom/IntroSection\";\nimport ExamplesSection from \"./dom/ExamplesSection\";\nimport InputSection from \"./dom/InputSection\";\nimport AuthorSection from \"./dom/AuthorSection\";\nimport { Code, InlineCode } from \"./dom/Code\";\nimport \"./App.css\";\n\nconst blink = `\nuniform vec2 resolution; // Resolution of the element\nuniform vec2 offset;     // Position of the element in the screen\nuniform float time;      // Time passed since mount\nuniform sampler2D src;   // Input texture\n\nvoid main() {\n    // Get UV in the element\n    vec2 uv = (gl_FragCoord.xy - offset) / resolution;\n\n    gl_FragColor = texture2D(src, uv) * step(.5, fract(time));\n}\n`;\n\nconst fadeIn = `\nuniform vec2 resolution;\nuniform vec2 offset;\nuniform float time;\nuniform float enterTime; // Time since entering the viewport\nuniform sampler2D src;\n\nvoid main() {\n    vec2 uv = (gl_FragCoord.xy - offset) / resolution;\n    gl_FragColor = texture2D(src, uv);\n\n    // Fade alpha by enterTime\n    gl_FragColor.a *= smoothstep(0.0, 3.0, enterTime);\n}\n`;\n\nconst scrollByScroll = `\nuniform vec2 resolution;\nuniform vec2 offset;\nuniform float scroll; // custom uniform passed as React props\nuniform sampler2D src;\n\nvoid main() {\n    vec2 uv = (gl_FragCoord.xy - offset) / resolution;\n\n    // scroll X by scroll\n    uv.x = fract(uv.x + scroll * 30.);\n\n    gl_FragColor = texture2D(src, uv);\n}\n`;\n\nconst App: React.FC = () => {\n    return (\n        <VFX.VFXProvider pixelRatio={1}>\n            <Bg />\n            <div className=\"App\">\n                <Frame />\n                <LogoSection />\n                <IntroSection />\n                <ExamplesSection />\n                <section>\n                    <h2 id=\"install\">Install</h2>\n                    <code>npm i react-vfx</code>\n\n                    <p>\n                        See{\" \"}\n                        <a\n                            href=\"https://github.com/fand/react-vfx\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            GitHub\n                        </a>{\" \"}\n                        for more info.\n                    </p>\n                </section>\n                <section>\n                    <h2 id=\"usage\">Usage</h2>\n                    <p>\n                        REACT-VFX consists of{\" \"}\n                        <b>\n                            <i>VFX Provider</i>\n                        </b>{\" \"}\n                        and{\" \"}\n                        <b>\n                            <i>VFX Elements</i>\n                        </b>\n                        .\n                    </p>\n                    <p>\n                        First, wrap your entire app with{\" \"}\n                        <InlineCode>{\"<VFXProvider>\"}</InlineCode>.\n                    </p>\n                    <Code>\n                        {dedent`\n                            import { VFXProvider } from 'react-vfx';\n\n                            function App {\n                              return (\n                                <VFXProvider>\n                                  {/* Place your app here */}\n                                </VFXProvider>\n                              );\n                            }\n                        `}\n                    </Code>\n                    <p>\n                        Then you can use VFX Elements anywhere in you app. Use{\" \"}\n                        <InlineCode>{\"<VFXImg>\"}</InlineCode>,{\" \"}\n                        <InlineCode>{\"<VFXVideo>\"}</InlineCode> or{\" \"}\n                        <InlineCode>{\"<VFXSpan>\"}</InlineCode> instead of{\" \"}\n                        <InlineCode>{\"<img>\"}</InlineCode>,{\" \"}\n                        <InlineCode>{\"<video>\"}</InlineCode> or{\" \"}\n                        <InlineCode>{\"<span>\"}</InlineCode>.\n                    </p>\n                    <p>\n                        VFX Elements have <InlineCode>shader</InlineCode>{\" \"}\n                        property. etc. All available shaders are listed{\" \"}\n                        <a\n                            href=\"https://github.com/fand/react-vfx/tree/master/src/constants.ts\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            here\n                        </a>\n                        .\n                    </p>\n                    <Code>\n                        {dedent`\n                            import { VFXImg } from 'react-vfx';\n\n                            function Component {\n                              return (\n                                <VFXImg\n                                  src=\"react-logo.png\"\n                                  shader=\"rainbow\"/>\n                              );\n                            }\n                        `}\n                    </Code>\n                    <section>\n                        <h3>Image</h3>\n                        <p>\n                            Use <InlineCode>{\"<VFXImg>\"}</InlineCode> instead of{\" \"}\n                            <InlineCode>{\"<img>\"}</InlineCode>.<br />\n                        </p>\n                        <Code>\n                            {dedent`\n                                import { VFXImg } from 'react-vfx';\n\n                                <VFXImg src=\"react-logo.png\" shader=\"rainbow\"/>\n\n                                // or add attributes\n                                <VFXImg\n                                  src=\"react-logo.png\"\n                                  alt=\"React Logo\"\n                                  shader=\"rainbow\"/>\n                            `}\n                        </Code>\n                    </section>\n                    <section>\n                        <h3>Video</h3>\n                        <p>\n                            Use <InlineCode>{\"<VFXVideo>\"}</InlineCode> instead\n                            of <InlineCode>{\"<video>\"}</InlineCode>.<br />\n                        </p>\n                        <Code>\n                            {dedent`\n                                import { VFXVideo } from 'react-vfx';\n\n                                <VFXVideo src=\"mind_blown.mp4\" shader=\"halftone\"/>\n                            `}\n                        </Code>\n                    </section>\n                    <section>\n                        <h3>Text</h3>\n                        <p>\n                            Use <InlineCode>{\"<VFXSpan>\"}</InlineCode> instead\n                            of <InlineCode>{\"<span>\"}</InlineCode>.<br />\n                        </p>\n                        <Code>\n                            {dedent`\n                                import { VFXSpan } from 'react-vfx';\n\n                                <VFXSpan>Hello world!</VFXSpan>\n                            `}\n                        </Code>\n                        <p>\n                            <InlineCode>{\"<VFXSpan>\"}</InlineCode> automatically\n                            re-renders when its content is updated.\n                        </p>\n                        <InputSection />\n                        <p>\n                            <i>\n                                NOTE: VFXSpan doesn't work with nested elements.\n                            </i>\n                        </p>\n                    </section>\n                </section>\n                <section>\n                    <h2 id=\"custom-shaders\">Custom Shaders</h2>\n                    <p>You can use your own shader in REACT-VFX.</p>\n                    <Code>{dedent`\n                        import { VFXSpan } from 'react-vfx';\n\n                        const blink = \\`\n                        uniform vec2 resolution; // Resolution of the element\n                        uniform vec2 offset;     // Position of the element in the screen\n                        uniform float time;      // Time passed since mount\n                        uniform sampler2D src;   // Input texture\n\n                        void main() {\n                            // Get UV in the element\n                            vec2 uv = (gl_FragCoord.xy - offset) / resolution;\n\n                            gl_FragColor = texture2D(src, uv) * step(.5, fract(time));\n                        }\n                        \\`;\n\n                        export default = () => (\n                            <VFXSpan shader={blink}>I'm blinking!</VFXSpan>\n                        );\n                    `}</Code>\n                    <p>This renders like this:</p>\n                    <VFX.VFXSpan\n                        shader={blink}\n                        style={{\n                            fontSize: \"72px\",\n                            fontWeight: \"bold\",\n                            fontStyle: \"italic\"\n                        }}\n                    >\n                        I'm blinking!\n                    </VFX.VFXSpan>\n                    <section className=\"Secton3\">\n                        <h3>Transition</h3>\n                        <p>\n                            REACT-VFX provides a uniform variable{\" \"}\n                            <InlineCode>float enterTime;</InlineCode> to write\n                            transition effects.{\" \"}\n                        </p>\n                        <Code>{dedent`\n                            import { VFXSpan } from 'react-vfx';\n\n                            const fadeIn = \\`\n                            uniform vec2 resolution;\n                            uniform vec2 offset;\n                            uniform float time;\n                            uniform float enterTime; // Time since entering the viewport\n                            uniform sampler2D src;\n\n                            void main() {\n                                vec2 uv = (gl_FragCoord.xy - offset) / resolution;\n                                gl_FragColor = texture2D(src, uv);\n\n                                // Fade alpha by enterTime\n                                gl_FragColor.a *= smoothstep(0.0, 3.0, enterTime);\n                            }\n                            \\`;\n\n                            export default = () => (\n                                <VFXSpan shader={fadeIn}>I'm fading!</VFXSpan>\n                            );\n                        `}</Code>\n                        <p>This renders like this:</p>\n                        <VFX.VFXSpan\n                            shader={fadeIn}\n                            style={{\n                                fontSize: \"72px\",\n                                fontWeight: \"bold\",\n                                fontStyle: \"italic\"\n                            }}\n                        >\n                            I'm fading!\n                        </VFX.VFXSpan>\n                    </section>\n                    <section className=\"Secton4\">\n                        <h3>Custom Uniforms</h3>\n                        <p>\n                            REACT-VFX accepts custom uniform variables as\n                            `uniforms`. You can pass objects of parameters or\n                            functions:\n                        </p>\n                        <Code>\n                            {dedent`\n                            // dictionary of parameters or functions\n                            export type VFXUniforms = {\n                                [name: string]: VFXUniformValue | (() => VFXUniformValue);\n                            };\n\n                            // REACT-VFX currently supports float, vec2, vec3 and vec4.\n                            export type VFXUniformValue =\n                                | number // float\n                                | [number, number] // vec2\n                                | [number, number, number] // vec3\n                                | [number, number, number, number]; // vec4\n                        `}\n                        </Code>\n                        <p>\n                            If a parameter frequently changes over time (e.g.\n                            scroll position), consider passing it as a function\n                            than a native value to avoid performance problem.\n                        </p>\n                        <Code>{dedent`\n                            import { VFXSpan } from 'react-vfx';\n\n                            const scrollByScroll = \\`\n                            uniform vec2 resolution;\n                            uniform vec2 offset;\n                            uniform float scroll; // custom uniform passed as props\n                            uniform sampler2D src;\n\n                            void main() {\n                                vec2 uv = (gl_FragCoord.xy - offset) / resolution;\n\n                                // scroll X by scroll\n                                uv.x = fract(uv.x + scroll * 30.);\n\n                                gl_FragColor = texture2D(src, uv);\n                            }\n                            \\`;\n\n                            export default = () => (\n                                <VFXSpan shader={scrollByScroll} uniforms={{\n                                    scroll: () => window.scrollY / (document.body.scrollHeight - window.innerHeight);\n                                }}>I'm blinking!</VFXSpan>\n                            );\n                        `}</Code>\n                        <p>This renders like this:</p>\n                        <VFX.VFXSpan\n                            shader={scrollByScroll}\n                            style={{\n                                fontSize: \"72px\",\n                                fontWeight: \"bold\",\n                                fontStyle: \"italic\"\n                            }}\n                            uniforms={{\n                                scroll: () =>\n                                    window.scrollY /\n                                    (document.body.scrollHeight -\n                                        window.innerHeight)\n                            }}\n                        >\n                            I'm scrolling!\n                        </VFX.VFXSpan>\n                    </section>\n                </section>\n                <AuthorSection />\n            </div>\n        </VFX.VFXProvider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport vhCheck from \"vh-check\";\r\nvhCheck();\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.VFXContext = void 0;\r\nconst react_1 = require(\"react\");\r\nexports.VFXContext = react_1.createContext(null);\r\n//# sourceMappingURL=context.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.VFXProvider = void 0;\r\nconst React = __importStar(require(\"react\"));\r\nconst react_1 = require(\"react\");\r\nconst context_1 = require(\"./context\");\r\nconst vfx_player_1 = __importDefault(require(\"./vfx-player\"));\r\nconst canvasStyle = {\r\n    position: \"fixed\",\r\n    top: 0,\r\n    left: 0,\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n    \"z-index\": 9999,\r\n    \"pointer-events\": \"none\"\r\n};\r\nexports.VFXProvider = props => {\r\n    const [_player, setPlayer] = react_1.useState(null);\r\n    react_1.useEffect(() => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        for (const [k, v] of Object.entries(canvasStyle)) {\r\n            canvas.style.setProperty(k, v.toString());\r\n        }\r\n        if (props.zIndex !== undefined) {\r\n            canvas.style.setProperty(\"z-index\", props.zIndex.toString());\r\n        }\r\n        document.body.appendChild(canvas);\r\n        const player = new vfx_player_1.default(canvas, props.pixelRatio);\r\n        setPlayer(player);\r\n        player.play();\r\n        return () => {\r\n            player.stop();\r\n            player.destroy();\r\n            canvas.remove();\r\n        };\r\n    }, [props.pixelRatio, props.zIndex]);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(context_1.VFXContext.Provider, { value: _player }, props.children)));\r\n};\r\n//# sourceMappingURL=provider.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst THREE = __importStar(require(\"three\"));\r\nconst dom_to_canvas_1 = __importDefault(require(\"./dom-to-canvas\"));\r\nconst constants_1 = require(\"./constants\");\r\nconst gif_1 = __importDefault(require(\"./gif\"));\r\nconst gifFor = new Map();\r\nclass VFXPlayer {\r\n    constructor(canvas, pixelRatio) {\r\n        this.canvas = canvas;\r\n        this.isPlaying = false;\r\n        this.pixelRatio = 2;\r\n        this.elements = [];\r\n        this.textureLoader = new THREE.TextureLoader();\r\n        this.w = 0;\r\n        this.h = 0;\r\n        this.scrollX = 0;\r\n        this.scrollY = 0;\r\n        this.mouseX = 0;\r\n        this.mouseY = 0;\r\n        this.resize = () => __awaiter(this, void 0, void 0, function* () {\r\n            if (typeof window !== \"undefined\") {\r\n                for (const e of this.elements) {\r\n                    if (e.type === \"text\" && e.isInViewport) {\r\n                        const rect = e.element.getBoundingClientRect();\r\n                        if (rect.width !== e.width || rect.height !== e.height) {\r\n                            yield this.rerender(e);\r\n                            e.width = rect.width;\r\n                            e.height = rect.height;\r\n                        }\r\n                    }\r\n                }\r\n                for (const e of this.elements) {\r\n                    if (e.type === \"text\" && !e.isInViewport) {\r\n                        const rect = e.element.getBoundingClientRect();\r\n                        if (rect.width !== e.width || rect.height !== e.height) {\r\n                            yield this.rerender(e);\r\n                            e.width = rect.width;\r\n                            e.height = rect.height;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.scroll = () => {\r\n            if (typeof window !== \"undefined\") {\r\n                this.scrollX = window.scrollX;\r\n                this.scrollY = window.scrollY;\r\n            }\r\n        };\r\n        this.mousemove = (e) => {\r\n            if (typeof window !== \"undefined\") {\r\n                this.mouseX = e.clientX;\r\n                this.mouseY = window.innerHeight - e.clientY;\r\n            }\r\n        };\r\n        this.playLoop = () => {\r\n            const now = Date.now() / 1000;\r\n            this.renderer.clear();\r\n            this.updateCanvasSize();\r\n            this.elements.forEach(e => {\r\n                const rect = e.element.getBoundingClientRect();\r\n                const isInViewport = this.isRectInViewport(rect);\r\n                if (isInViewport && !e.isInViewport) {\r\n                    e.enterTime = now;\r\n                    e.leaveTime = Infinity;\r\n                }\r\n                if (!isInViewport && e.isInViewport) {\r\n                    e.leaveTime = now;\r\n                }\r\n                e.isInViewport = isInViewport;\r\n                if (isInViewport && now - e.leaveTime > e.release) {\r\n                    return;\r\n                }\r\n                e.uniforms[\"time\"].value = now - e.startTime;\r\n                e.uniforms[\"enterTime\"].value =\r\n                    e.enterTime === -1 ? 0 : now - e.enterTime;\r\n                e.uniforms[\"leaveTime\"].value =\r\n                    e.leaveTime === -1 ? 0 : now - e.leaveTime;\r\n                e.uniforms[\"resolution\"].value.x = rect.width * this.pixelRatio;\r\n                e.uniforms[\"resolution\"].value.y = rect.height * this.pixelRatio;\r\n                e.uniforms[\"offset\"].value.x = rect.left * this.pixelRatio;\r\n                e.uniforms[\"offset\"].value.y =\r\n                    (window.innerHeight - rect.top - rect.height) * this.pixelRatio;\r\n                e.uniforms[\"mouse\"].value.x = this.mouseX * this.pixelRatio;\r\n                e.uniforms[\"mouse\"].value.y = this.mouseY * this.pixelRatio;\r\n                for (const [key, gen] of Object.entries(e.uniformGenerators)) {\r\n                    e.uniforms[key].value = gen();\r\n                }\r\n                const gif = gifFor.get(e.element);\r\n                if (gif !== undefined) {\r\n                    gif.update();\r\n                }\r\n                if (e.type === \"video\" || e.isGif) {\r\n                    e.uniforms[\"src\"].value.needsUpdate = true;\r\n                }\r\n                this.camera.lookAt(e.scene.position);\r\n                this.renderer.setViewport(rect.left, window.innerHeight - (rect.top + rect.height), rect.width, rect.height);\r\n                try {\r\n                    this.renderer.render(e.scene, this.camera);\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n            });\r\n            if (this.isPlaying) {\r\n                requestAnimationFrame(this.playLoop);\r\n            }\r\n        };\r\n        this.renderer = new THREE.WebGLRenderer({\r\n            canvas,\r\n            alpha: true\r\n        });\r\n        this.renderer.autoClear = false;\r\n        this.renderer.setClearAlpha(0);\r\n        if (typeof window !== \"undefined\") {\r\n            this.pixelRatio = pixelRatio || window.devicePixelRatio;\r\n            window.addEventListener(\"resize\", this.resize);\r\n            window.addEventListener(\"scroll\", this.scroll, {\r\n                passive: true\r\n            });\r\n            window.addEventListener(\"mousemove\", this.mousemove);\r\n        }\r\n        this.resize();\r\n        this.scroll();\r\n        this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);\r\n        this.camera.position.set(0, 0, 1);\r\n    }\r\n    destroy() {\r\n        if (typeof window !== \"undefined\") {\r\n            window.removeEventListener(\"resize\", this.resize);\r\n            window.removeEventListener(\"scroll\", this.scroll);\r\n            window.removeEventListener(\"mousemove\", this.mousemove);\r\n        }\r\n    }\r\n    updateCanvasSize() {\r\n        if (typeof window !== \"undefined\") {\r\n            const w = window.innerWidth;\r\n            const h = window.innerHeight;\r\n            if (w !== this.w || h !== this.h) {\r\n                this.canvas.width = w;\r\n                this.canvas.height = h;\r\n                this.renderer.setSize(w, h);\r\n                this.renderer.setPixelRatio(this.pixelRatio);\r\n                this.w = w;\r\n                this.h = h;\r\n            }\r\n        }\r\n    }\r\n    rerender(e) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const srcTexture = e.uniforms[\"src\"];\r\n            try {\r\n                e.element.style.setProperty(\"opacity\", \"1\");\r\n                const canvas = yield dom_to_canvas_1.default(e.element);\r\n                if (canvas.width === 0 || canvas.width === 0) {\r\n                    throw \"omg\";\r\n                }\r\n                const opacity = e.type === \"video\" ? \"0.0001\" : \"0\";\r\n                e.element.style.setProperty(\"opacity\", opacity);\r\n                const texture = new THREE.Texture(canvas);\r\n                texture.needsUpdate = true;\r\n                srcTexture.value = texture;\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n    }\r\n    addElement(element, opts = {}) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const shaderName = opts.shader || \"uvGradient\";\r\n            const shader = constants_1.shaders[shaderName] || shaderName;\r\n            const rect = element.getBoundingClientRect();\r\n            const isInViewport = this.isRectInViewport(rect);\r\n            let texture;\r\n            let type;\r\n            let isGif = false;\r\n            if (element instanceof HTMLImageElement) {\r\n                type = \"img\";\r\n                isGif = !!element.src.match(/\\.gif/i);\r\n                if (isGif) {\r\n                    const gif = yield gif_1.default.create(element.src, this.pixelRatio);\r\n                    gifFor.set(element, gif);\r\n                    texture = new THREE.Texture(gif.getCanvas());\r\n                }\r\n                else {\r\n                    texture = this.textureLoader.load(element.src);\r\n                }\r\n            }\r\n            else if (element instanceof HTMLVideoElement) {\r\n                texture = new THREE.VideoTexture(element);\r\n                type = \"video\";\r\n            }\r\n            else {\r\n                const canvas = yield dom_to_canvas_1.default(element);\r\n                texture = new THREE.Texture(canvas);\r\n                type = \"text\";\r\n            }\r\n            texture.minFilter = THREE.LinearFilter;\r\n            texture.magFilter = THREE.LinearFilter;\r\n            texture.format = THREE.RGBAFormat;\r\n            texture.needsUpdate = true;\r\n            const opacity = type === \"video\" ? \"0.0001\" : \"0\";\r\n            element.style.setProperty(\"opacity\", opacity);\r\n            const uniforms = {\r\n                src: { value: texture },\r\n                resolution: {\r\n                    value: new THREE.Vector2()\r\n                },\r\n                offset: { value: new THREE.Vector2() },\r\n                time: { value: 0.0 },\r\n                enterTime: { value: -1.0 },\r\n                leaveTime: { value: -1.0 },\r\n                mouse: { value: new THREE.Vector2() }\r\n            };\r\n            const uniformGenerators = {};\r\n            if (opts.uniforms !== undefined) {\r\n                const keys = Object.keys(opts.uniforms);\r\n                for (const key of keys) {\r\n                    const value = opts.uniforms[key];\r\n                    if (typeof value === \"function\") {\r\n                        uniforms[key] = {\r\n                            value: value()\r\n                        };\r\n                        uniformGenerators[key] = value;\r\n                    }\r\n                    else {\r\n                        uniforms[key] = { value };\r\n                    }\r\n                }\r\n            }\r\n            const scene = new THREE.Scene();\r\n            const geometry = new THREE.PlaneGeometry(2, 2);\r\n            const material = new THREE.ShaderMaterial({\r\n                vertexShader: constants_1.DEFAULT_VERTEX_SHADER,\r\n                fragmentShader: shader,\r\n                transparent: true,\r\n                uniforms\r\n            });\r\n            material.extensions = {\r\n                derivatives: true,\r\n                drawBuffers: true,\r\n                fragDepth: true,\r\n                shaderTextureLOD: true\r\n            };\r\n            scene.add(new THREE.Mesh(geometry, material));\r\n            const now = Date.now() / 1000;\r\n            const elem = {\r\n                type,\r\n                element,\r\n                isInViewport,\r\n                width: rect.width,\r\n                height: rect.height,\r\n                scene,\r\n                uniforms,\r\n                uniformGenerators,\r\n                startTime: now,\r\n                enterTime: isInViewport ? now : -1,\r\n                leaveTime: Infinity,\r\n                release: (_a = opts.release) !== null && _a !== void 0 ? _a : 0,\r\n                isGif\r\n            };\r\n            this.elements.push(elem);\r\n        });\r\n    }\r\n    removeElement(element) {\r\n        const i = this.elements.findIndex(e => e.element === element);\r\n        if (i !== -1) {\r\n            this.elements.splice(i, 1);\r\n        }\r\n    }\r\n    updateElement(element) {\r\n        const i = this.elements.findIndex(e => e.element === element);\r\n        if (i !== -1) {\r\n            return this.rerender(this.elements[i]);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    play() {\r\n        this.isPlaying = true;\r\n        this.playLoop();\r\n    }\r\n    stop() {\r\n        this.isPlaying = false;\r\n    }\r\n    isRectInViewport(rect) {\r\n        return (rect.left <= this.w &&\r\n            rect.right >= 0 &&\r\n            rect.top <= this.h &&\r\n            rect.bottom >= 0);\r\n    }\r\n}\r\nexports.default = VFXPlayer;\r\n//# sourceMappingURL=vfx-player.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst convertHtmlToXml = (html) => {\r\n    const doc = document.implementation.createHTMLDocument(\"test\");\r\n    const range = doc.createRange();\r\n    range.selectNodeContents(doc.documentElement);\r\n    range.deleteContents();\r\n    const h = document.createElement(\"head\");\r\n    doc.documentElement.appendChild(h);\r\n    doc.documentElement.appendChild(range.createContextualFragment(html));\r\n    doc.documentElement.setAttribute(\"xmlns\", doc.documentElement.namespaceURI);\r\n    const wfHtml = new XMLSerializer().serializeToString(doc);\r\n    return wfHtml.replace(/<!DOCTYPE html>/, \"\");\r\n};\r\nfunction cloneNode(node) {\r\n    return node.cloneNode();\r\n}\r\nfunction getCanvasFromElement(element) {\r\n    const rect = element.getBoundingClientRect();\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = Math.max(rect.width * 1.01, rect.width + 1);\r\n    canvas.height = Math.max(rect.height * 1.01, rect.height + 1);\r\n    const newElement = cloneNode(element);\r\n    const styles = window.getComputedStyle(element);\r\n    Array.from(styles).forEach(key => {\r\n        newElement.style.setProperty(key, styles.getPropertyValue(key), styles.getPropertyPriority(key));\r\n    });\r\n    newElement.innerHTML = element.innerHTML;\r\n    const wrapper = document.createElement(\"div\");\r\n    wrapper.style.setProperty(\"text-align\", styles.textAlign);\r\n    wrapper.style.setProperty(\"vertical-align\", styles.verticalAlign);\r\n    wrapper.appendChild(newElement);\r\n    const html = wrapper.outerHTML;\r\n    const xml = convertHtmlToXml(html);\r\n    const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${canvas.width}\" height=\"${canvas.height}\">` +\r\n        `<foreignObject width=\"100%\" height=\"100%\">${xml}</foreignObject></svg>`;\r\n    return new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        img.onload = () => {\r\n            const ctx = canvas.getContext(\"2d\");\r\n            if (ctx === null) {\r\n                return reject();\r\n            }\r\n            ctx.drawImage(img, 0, 0);\r\n            resolve(canvas);\r\n        };\r\n        img.src = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svg)}`;\r\n    });\r\n}\r\nexports.default = getCanvasFromElement;\r\n//# sourceMappingURL=dom-to-canvas.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.shaders = exports.DEFAULT_VERTEX_SHADER = void 0;\r\nexports.DEFAULT_VERTEX_SHADER = `\r\nprecision mediump float;\r\nvoid main() {\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`;\r\nexports.shaders = {\r\n    uvGradient: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n    void main() {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n\r\n        gl_FragColor = vec4(uv, sin(time) * .5 + .5, 1);\r\n\r\n        vec4 img = texture2D(src, uv);\r\n        gl_FragColor *= smoothstep(0., 1., img.a);\r\n    }\r\n    `,\r\n    rainbow: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    vec3 hsv2rgb(vec3 c) {\r\n        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n    }\r\n\r\n    vec3 rgb2hsv(vec3 c) {\r\n        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n        float d = q.x - min(q.w, q.y);\r\n        float e = 1.0e-10;\r\n        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n    }\r\n\r\n    vec3 hueShift(vec3 rgb, float t) {\r\n        vec3 hsv = rgb2hsv(rgb);\r\n        hsv.x = fract(hsv.x + t);\r\n        return hsv2rgb(hsv);\r\n    }\r\n\r\n    void main() {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n\r\n        vec2 uv2 = uv;\r\n        uv2.x *= resolution.x / resolution.y;\r\n\r\n        float x = (uv2.x - uv2.y) - fract(time);\r\n\r\n        vec4 img = texture2D(src, uv);\r\n        float gray = length(img.rgb);\r\n\r\n        img.rgb = vec3(hueShift(vec3(1,0,0), x) * gray);\r\n\r\n        gl_FragColor = img;\r\n    }\r\n    `,\r\n    glitch: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    float nn(float y, float t) {\r\n        float n = (\r\n            sin(y * .07 + t * 8. + sin(y * .5 + t * 10.)) +\r\n            sin(y * .7 + t * 2. + sin(y * .3 + t * 8.)) * .7 +\r\n            sin(y * 1.1 + t * 2.8) * .4\r\n        );\r\n\r\n        n += sin(y * 124. + t * 100.7) * sin(y * 877. - t * 38.8) * .3;\r\n\r\n        return n;\r\n    }\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n        vec4 color = texture2D(src, uv);\r\n\r\n        float t = mod(time, 3.14 * 10.);\r\n\r\n        // Seed value\r\n        float v = fract(sin(t * 2.) * 700.);\r\n\r\n        if (abs(nn(uv.y, t)) < 1.2) {\r\n            v *= 0.01;\r\n        }\r\n\r\n        // Prepare for chromatic Abbreveation\r\n        vec2 focus = vec2(0.5);\r\n        float d = v * 0.6;\r\n        vec2 ruv = fract(focus + (uv - focus) * (1. - d));\r\n        vec2 guv = fract(focus + (uv - focus) * (1. - 2. * d));\r\n        vec2 buv = fract(focus + (uv - focus) * (1. - 3. * d));\r\n\r\n        // Random Glitch\r\n        if (v > 0.1) {\r\n            // Randomize y\r\n            float y = floor(uv.y * 13. * sin(35. * t)) + 1.;\r\n            if (sin(36. * y * v) > 0.9) {\r\n                ruv.x = fract(uv.x + sin(76. * y) * 0.1);\r\n                guv.x = fract(uv.x + sin(34. * y) * 0.1);\r\n                buv.x = fract(uv.x + sin(59. * y) * 0.1);\r\n            }\r\n\r\n            // RGB Shift\r\n            v = pow(v * 1.5, 2.) * 0.15;\r\n            color.rgb *= 0.3;\r\n            color.r += texture2D(src, vec2(uv.x + sin(t * 123.45) * v, uv.y)).r;\r\n            color.g += texture2D(src, vec2(uv.x + sin(t * 157.67) * v, uv.y)).g;\r\n            color.b += texture2D(src, vec2(uv.x + sin(t * 143.67) * v, uv.y)).b;\r\n        }\r\n\r\n        // Compose Chromatic Abbreveation\r\n        if (abs(nn(uv.y, t)) > 1.1) {\r\n            color.r = color.r * 0.5 + color.r * texture2D(src, ruv).r;\r\n            color.g = color.g * 0.5 + color.g * texture2D(src, guv).g;\r\n            color.b = color.b * 0.5 + color.b * texture2D(src, buv).b;\r\n            color *= 2.;\r\n        }\r\n\r\n        gl_FragColor = color;\r\n        gl_FragColor.a = step(.1, length(color.rgb));\r\n    }\r\n    `,\r\n    pixelate: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n\r\n        float b = sin(time * 2.) * 32. + 48.;\r\n        uv = floor(uv * b) / b;\r\n        gl_FragColor = texture2D(src, uv);\r\n    }\r\n    `,\r\n    rgbGlitch: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    float random(vec2 st) {\r\n        return fract(sin(dot(st, vec2(948.,824.))) * 30284.);\r\n    }\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n        vec2 uvr = uv, uvg = uv, uvb = uv;\r\n\r\n        float tt = mod(time, 17.);\r\n\r\n        if (fract(tt * 0.3) > .9 || fract(tt * 0.71) > .9) {\r\n            float t = floor(tt * 13.);\r\n\r\n            float n = random(vec2(t, floor(uv.y * 3.7)));\r\n            if (n > .7) {\r\n                uvr.x = fract(uvr.x + random(vec2(t, 1.)) * .03);\r\n                uvg.x = fract(uvr.x + random(vec2(t, 2.)) * .03);\r\n                uvb.x = fract(uvr.x + random(vec2(t, 3.)) * .03);\r\n            }\r\n\r\n            float ny = random(vec2(t * 17. + floor(uv * 13.7)));\r\n            if (ny > .7) {\r\n                uvr.x = fract(uvr.x + random(vec2(t, 1.)) * .1);\r\n                uvg.x = fract(uvr.x + random(vec2(t, 2.)) * .1);\r\n                uvb.x = fract(uvr.x + random(vec2(t, 3.)) * .1);\r\n            }\r\n        }\r\n\r\n        vec4 cr = texture2D(src, uvr);\r\n        vec4 cg = texture2D(src, uvg);\r\n        vec4 cb = texture2D(src, uvb);\r\n\r\n        gl_FragColor = vec4(\r\n            cr.r,\r\n            cg.g,\r\n            cb.b,\r\n            step(.1, cr.a + cg.a + cb.a)\r\n        );\r\n    }\r\n    `,\r\n    rgbShift: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    float nn(float y, float t) {\r\n        float n = (\r\n            sin(y * .07 + t * 8. + sin(y * .5 + t * 10.)) +\r\n            sin(y * .7 + t * 2. + sin(y * .3 + t * 8.)) * .7 +\r\n            sin(y * 1.1 + t * 2.8) * .4\r\n        );\r\n\r\n        n += sin(y * 124. + t * 100.7) * sin(y * 877. - t * 38.8) * .3;\r\n\r\n        return n;\r\n    }\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n        vec2 uvr = uv, uvg = uv, uvb = uv;\r\n\r\n        float t = mod(time, 30.);\r\n\r\n        float amp = 10. / resolution.x;\r\n\r\n        if (abs(nn(uv.y, t)) > 1.) {\r\n            uvr.x += nn(uv.y, t) * amp;\r\n            uvg.x += nn(uv.y, t + 10.) * amp;\r\n            uvb.x += nn(uv.y, t + 20.) * amp;\r\n        }\r\n\r\n        vec4 cr = texture2D(src, fract(uvr));\r\n        vec4 cg = texture2D(src, fract(uvg));\r\n        vec4 cb = texture2D(src, fract(uvb));\r\n\r\n        gl_FragColor = vec4(\r\n            cr.r,\r\n            cg.g,\r\n            cb.b,\r\n            step(.1, cr.a + cg.a + cb.a)\r\n        );\r\n    }\r\n    `,\r\n    halftone: `\r\n    // Halftone Effect by zoidberg\r\n    // https://www.interactiveshaderformat.com/sketches/234\r\n\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    // TODO: uniform\r\n    #define gridSize 10.0\r\n    #define dotSize 0.7\r\n    #define smoothing 0.15\r\n    #define speed 1.0\r\n\r\n    #define IMG_PIXEL(x, y) texture2D(x, (y - offset) / resolution);\r\n\r\n    vec4 gridRot = vec4(15.0, 45.0, 75.0, 0.0);\r\n\r\n    // during calculation we find the closest dot to a frag, determine its size, and then determine the size of the four dots above/below/right/left of it. this array of offsets move \"one left\", \"one up\", \"one right\", and \"one down\"...\r\n    vec2 originOffsets[4];\r\n\r\n    void main() {\r\n        vec2 fragCoord = gl_FragCoord.xy - offset;\r\n\r\n        // a halftone is an overlapping series of grids of dots\r\n        // each grid of dots is rotated by a different amount\r\n        // the size of the dots determines the colors. the shape of the dot should never change (always be a dot with regular edges)\r\n        originOffsets[0] = vec2(-1.0, 0.0);\r\n        originOffsets[1] = vec2(0.0, 1.0);\r\n        originOffsets[2] = vec2(1.0, 0.0);\r\n        originOffsets[3] = vec2(0.0, -1.0);\r\n\r\n        vec3 rgbAmounts = vec3(0.0);\r\n\r\n        // for each of the channels (i) of RGB...\r\n        for (float i=0.0; i<3.0; ++i) {\r\n            // figure out the rotation of the grid in radians\r\n            float rotRad = radians(gridRot[int(i)]);\r\n\r\n            // the grids are rotated counter-clockwise- to find the nearest dot, take the fragment pixel loc,\r\n            // rotate it clockwise, and split by the grid to find the center of the dot. then rotate this\r\n            // coord counter-clockwise to yield the location of the center of the dot in pixel coords local to the render space\r\n            mat2 ccTrans = mat2(vec2(cos(rotRad), sin(rotRad)), vec2(-1.0*sin(rotRad), cos(rotRad)));\r\n            mat2 cTrans = mat2(vec2(cos(rotRad), -1.0*sin(rotRad)), vec2(sin(rotRad), cos(rotRad)));\r\n\r\n            // find the location of the frag in the grid (prior to rotating it)\r\n            vec2 gridFragLoc = cTrans * fragCoord.xy;\r\n\r\n            // find the center of the dot closest to the frag- there's no \"round\" in GLSL 1.2, so do a \"floor\" to find the dot to the bottom-left of the frag, then figure out if the frag would be in the top and right halves of that square to find the closest dot to the frag\r\n            vec2 gridOriginLoc = vec2(floor(gridFragLoc.x/gridSize), floor(gridFragLoc.y/gridSize));\r\n\r\n            vec2 tmpGridCoords = gridFragLoc/vec2(gridSize);\r\n            bool fragAtTopOfGrid = ((tmpGridCoords.y-floor(tmpGridCoords.y)) > (gridSize/2.0)) ? true : false;\r\n            bool fragAtRightOfGrid = ((tmpGridCoords.x-floor(tmpGridCoords.x)) > (gridSize/2.0)) ? true : false;\r\n            if (fragAtTopOfGrid)\r\n                gridOriginLoc.y = gridOriginLoc.y + 1.0;\r\n            if (fragAtRightOfGrid)\r\n                gridOriginLoc.x = gridOriginLoc.x + 1.0;\r\n\r\n            // ...at this point, \"gridOriginLoc\" contains the grid coords of the nearest dot to the fragment being rendered\r\n            // convert the location of the center of the dot from grid coords to pixel coords\r\n            vec2 gridDotLoc = vec2(gridOriginLoc.x*gridSize, gridOriginLoc.y*gridSize) + vec2(gridSize/2.0);\r\n\r\n            // rotate the pixel coords of the center of the dot so they become relative to the rendering space\r\n            vec2 renderDotLoc = ccTrans * gridDotLoc;\r\n\r\n            // get the color of the pixel of the input image under this dot (the color will ultimately determine the size of the dot)\r\n            vec4 renderDotImageColorRGB = IMG_PIXEL(src, renderDotLoc + offset);\r\n\r\n            // the amount of this channel is taken from the same channel of the color of the pixel of the input image under this halftone dot\r\n            float imageChannelAmount = renderDotImageColorRGB[int(i)];\r\n\r\n            // the size of the dot is determined by the value of the channel\r\n            float dotRadius = imageChannelAmount * (gridSize * dotSize);\r\n            float fragDistanceToDotCenter = distance(fragCoord.xy, renderDotLoc);\r\n            if (fragDistanceToDotCenter < dotRadius) {\r\n                rgbAmounts[int(i)] += smoothstep(dotRadius, dotRadius-(dotRadius*smoothing), fragDistanceToDotCenter);\r\n            }\r\n\r\n            // calcluate the size of the dots abov/below/to the left/right to see if they're overlapping\r\n            for (float j=0.0; j<4.0; ++j) {\r\n                gridDotLoc = vec2((gridOriginLoc.x+originOffsets[int(j)].x)*gridSize, (gridOriginLoc.y+originOffsets[int(j)].y)*gridSize) + vec2(gridSize/2.0);\r\n\r\n                renderDotLoc = ccTrans * gridDotLoc;\r\n                renderDotImageColorRGB = IMG_PIXEL(src, renderDotLoc + offset);\r\n\r\n                imageChannelAmount = renderDotImageColorRGB[int(i)];\r\n                dotRadius = imageChannelAmount * (gridSize*1.50/2.0);\r\n                fragDistanceToDotCenter = distance(fragCoord.xy, renderDotLoc);\r\n                if (fragDistanceToDotCenter < dotRadius) {\r\n                    rgbAmounts[int(i)] += smoothstep(dotRadius, dotRadius-(dotRadius*smoothing), fragDistanceToDotCenter);\r\n                }\r\n            }\r\n        }\r\n\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n        vec4 original = texture2D(src, uv);\r\n        float alpha = step(.1, rgbAmounts[0] + rgbAmounts[1] + rgbAmounts[2] + original.a);\r\n\r\n        gl_FragColor = vec4(rgbAmounts[0], rgbAmounts[1], rgbAmounts[2], alpha);\r\n    }\r\n    `,\r\n    sinewave: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n        vec2 uvr = uv, uvg = uv, uvb = uv;\r\n\r\n        float amp = 20. / resolution.x;\r\n\r\n        uvr.x += sin(uv.y * 7. + time * 3.) * amp;\r\n        uvg.x += sin(uv.y * 7. + time * 3. + .4) * amp;\r\n        uvb.x += sin(uv.y * 7. + time * 3. + .8) * amp;\r\n\r\n        vec4 cr = texture2D(src, uvr) * step(0., uvr.x) * step(uvr.x, 1.);\r\n        vec4 cg = texture2D(src, uvg) * step(0., uvg.x) * step(uvg.x, 1.);\r\n        vec4 cb = texture2D(src, uvb) * step(0., uvb.x) * step(uvb.x, 1.);\r\n\r\n        gl_FragColor = vec4(\r\n            cr.r,\r\n            cg.g,\r\n            cb.b,\r\n            cr.a + cg.a + cb.a\r\n        );\r\n    }\r\n    `,\r\n    shine: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n\r\n        vec2 p = uv * 2. - 1.;\r\n        float a = atan(p.y, p.x);\r\n\r\n        vec4 col = texture2D(src, uv);\r\n        float gray = length(col.rgb);\r\n\r\n        float level = 1. + sin(a * 10. + time * 3.) * 0.2;\r\n\r\n        gl_FragColor = vec4(1, 1, .5, col.a) * level;\r\n    }\r\n    `,\r\n    blink: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n\r\n        gl_FragColor = texture2D(src, uv) * (sin(time * 5.) * 0.2 + 0.8);\r\n    }\r\n\r\n    `,\r\n    spring: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform sampler2D src;\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n        uv = (uv - .5) * (1.05 + sin(time * 5.) * 0.05) + .5;\r\n\r\n        if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) { discard; }\r\n\r\n        gl_FragColor = texture2D(src, uv);\r\n    }\r\n    `,\r\n    warpTransition: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform float enterTime;\r\n    uniform sampler2D src;\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n\r\n        if (enterTime < 1.5) {\r\n            float t = enterTime / 1.5;\r\n            uv.x += sin(floor(uv.y * 300.)) * 3. * exp(t * -10.);\r\n        }\r\n\r\n        gl_FragColor = texture2D(src, uv);\r\n    }\r\n    `,\r\n    slitScanTransition: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform float enterTime;\r\n    uniform sampler2D src;\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n\r\n        if (enterTime < 1.5) {\r\n            float t = 1. - enterTime / 1.5;\r\n            uv.y = uv.y > t ? uv.y : t;\r\n        }\r\n\r\n        gl_FragColor = texture2D(src, uv);\r\n    }\r\n    `,\r\n    pixelateTransition: `\r\n    precision mediump float;\r\n    uniform vec2 resolution;\r\n    uniform vec2 offset;\r\n    uniform float time;\r\n    uniform float enterTime;\r\n    uniform sampler2D src;\r\n\r\n    void main (void) {\r\n        vec2 uv = (gl_FragCoord.xy - offset) / resolution;\r\n\r\n        if (enterTime < 1.5) {\r\n            float t = enterTime / 1.5;\r\n\r\n            float b = floor(t * 64.);\r\n            uv = (floor(uv * b) + .5) / b;\r\n        }\r\n\r\n        gl_FragColor = texture2D(src, uv);\r\n    }\r\n    `\r\n};\r\n//# sourceMappingURL=constants.js.map","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst gifuct_js_1 = __importDefault(require(\"./gifuct-js\"));\r\nclass GIFData {\r\n    constructor(frames, width, height, pixelRatio) {\r\n        this.frames = [];\r\n        this.index = 0;\r\n        this.playTime = 0;\r\n        this.frames = frames;\r\n        this.canvas = document.createElement(\"canvas\");\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.pixelRatio = pixelRatio;\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        this.startTime = Date.now();\r\n    }\r\n    static create(src, pixelRatio) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const gif = yield fetch(src)\r\n                .then(resp => resp.arrayBuffer())\r\n                .then(buff => new gifuct_js_1.default(buff));\r\n            const frames = gif.decompressFrames(true, undefined, undefined);\r\n            const width = gif.raw.lsd.width;\r\n            const height = gif.raw.lsd.height;\r\n            return new GIFData(frames, width, height, pixelRatio);\r\n        });\r\n    }\r\n    getCanvas() {\r\n        return this.canvas;\r\n    }\r\n    update() {\r\n        const now = Date.now();\r\n        const elapsedTime = now - this.startTime;\r\n        while (this.playTime < elapsedTime) {\r\n            const f = this.frames[this.index % this.frames.length];\r\n            this.playTime += f.delay;\r\n            this.index++;\r\n        }\r\n        const frame = this.frames[this.index % this.frames.length];\r\n        const image = new ImageData(frame.patch, frame.dims.width, frame.dims.height);\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.putImageData(image, frame.dims.left, frame.dims.top);\r\n    }\r\n}\r\nexports.default = GIFData;\r\n//# sourceMappingURL=gif.js.map","\"use strict\";\r\nconst GIF = require(\"./gif\");\r\nmodule.exports = GIF;\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nconst DataParser = require(\"./dataparser\");\r\nconst gifSchema = require(\"./schema\");\r\nfunction GIF(arrayBuffer) {\r\n    var byteData = new Uint8Array(arrayBuffer);\r\n    var parser = new DataParser(byteData);\r\n    this.raw = parser.parse(gifSchema);\r\n    this.raw.hasImages = false;\r\n    for (var f = 0; f < this.raw.frames.length; f++) {\r\n        if (this.raw.frames[f].image) {\r\n            this.raw.hasImages = true;\r\n            break;\r\n        }\r\n    }\r\n}\r\nGIF.prototype.decompressFrame = function (index, buildPatch) {\r\n    if (index >= this.raw.frames.length) {\r\n        return null;\r\n    }\r\n    var frame = this.raw.frames[index];\r\n    if (frame.image) {\r\n        var totalPixels = frame.image.descriptor.width * frame.image.descriptor.height;\r\n        var pixels = lzw(frame.image.data.minCodeSize, frame.image.data.blocks, totalPixels);\r\n        if (frame.image.descriptor.lct.interlaced) {\r\n            pixels = deinterlace(pixels, frame.image.descriptor.width);\r\n        }\r\n        var image = {\r\n            pixels: pixels,\r\n            dims: {\r\n                top: frame.image.descriptor.top,\r\n                left: frame.image.descriptor.left,\r\n                width: frame.image.descriptor.width,\r\n                height: frame.image.descriptor.height\r\n            }\r\n        };\r\n        if (frame.image.descriptor.lct && frame.image.descriptor.lct.exists) {\r\n            image.colorTable = frame.image.lct;\r\n        }\r\n        else {\r\n            image.colorTable = this.raw.gct;\r\n        }\r\n        if (frame.gce) {\r\n            image.delay = (frame.gce.delay || 10) * 10;\r\n            image.disposalType = frame.gce.extras.disposal;\r\n            if (frame.gce.extras.transparentColorGiven) {\r\n                image.transparentIndex = frame.gce.transparentColorIndex;\r\n            }\r\n        }\r\n        if (buildPatch) {\r\n            image.patch = generatePatch(image);\r\n        }\r\n        return image;\r\n    }\r\n    return null;\r\n    function lzw(minCodeSize, data, pixelCount) {\r\n        var MAX_STACK_SIZE = 4096;\r\n        var nullCode = -1;\r\n        var npix = pixelCount;\r\n        var available, clear, code_mask, code_size, count, end_of_information, in_code, old_code, bits, code, i, datum, data_size, first, top, bi, pi;\r\n        var dstPixels = new Array(pixelCount);\r\n        var prefix = new Array(MAX_STACK_SIZE);\r\n        var suffix = new Array(MAX_STACK_SIZE);\r\n        var pixelStack = new Array(MAX_STACK_SIZE + 1);\r\n        data_size = minCodeSize;\r\n        clear = 1 << data_size;\r\n        end_of_information = clear + 1;\r\n        available = clear + 2;\r\n        old_code = nullCode;\r\n        code_size = data_size + 1;\r\n        code_mask = (1 << code_size) - 1;\r\n        for (code = 0; code < clear; code++) {\r\n            prefix[code] = 0;\r\n            suffix[code] = code;\r\n        }\r\n        datum = bits = count = first = top = pi = bi = 0;\r\n        for (i = 0; i < npix;) {\r\n            if (top === 0) {\r\n                if (bits < code_size) {\r\n                    datum += data[bi] << bits;\r\n                    bits += 8;\r\n                    bi++;\r\n                    continue;\r\n                }\r\n                code = datum & code_mask;\r\n                datum >>= code_size;\r\n                bits -= code_size;\r\n                if (code > available || code == end_of_information) {\r\n                    break;\r\n                }\r\n                if (code == clear) {\r\n                    code_size = data_size + 1;\r\n                    code_mask = (1 << code_size) - 1;\r\n                    available = clear + 2;\r\n                    old_code = nullCode;\r\n                    continue;\r\n                }\r\n                if (old_code == nullCode) {\r\n                    pixelStack[top++] = suffix[code];\r\n                    old_code = code;\r\n                    first = code;\r\n                    continue;\r\n                }\r\n                in_code = code;\r\n                if (code == available) {\r\n                    pixelStack[top++] = first;\r\n                    code = old_code;\r\n                }\r\n                while (code > clear) {\r\n                    pixelStack[top++] = suffix[code];\r\n                    code = prefix[code];\r\n                }\r\n                first = suffix[code] & 0xff;\r\n                pixelStack[top++] = first;\r\n                if (available < MAX_STACK_SIZE) {\r\n                    prefix[available] = old_code;\r\n                    suffix[available] = first;\r\n                    available++;\r\n                    if ((available & code_mask) === 0 &&\r\n                        available < MAX_STACK_SIZE) {\r\n                        code_size++;\r\n                        code_mask += available;\r\n                    }\r\n                }\r\n                old_code = in_code;\r\n            }\r\n            top--;\r\n            dstPixels[pi++] = pixelStack[top];\r\n            i++;\r\n        }\r\n        for (i = pi; i < npix; i++) {\r\n            dstPixels[i] = 0;\r\n        }\r\n        return dstPixels;\r\n    }\r\n    function deinterlace(pixels, width) {\r\n        var newPixels = new Array(pixels.length);\r\n        var rows = pixels.length / width;\r\n        var cpRow = function (toRow, fromRow) {\r\n            var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\r\n            newPixels.splice.apply(newPixels, [toRow * width, width].concat(fromPixels));\r\n        };\r\n        var offsets = [0, 4, 2, 1];\r\n        var steps = [8, 8, 4, 2];\r\n        var fromRow = 0;\r\n        for (var pass = 0; pass < 4; pass++) {\r\n            for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\r\n                cpRow(toRow, fromRow);\r\n                fromRow++;\r\n            }\r\n        }\r\n        return newPixels;\r\n    }\r\n    function generatePatch(image) {\r\n        var totalPixels = image.pixels.length;\r\n        var patchData = new Uint8ClampedArray(totalPixels * 4);\r\n        for (var i = 0; i < totalPixels; i++) {\r\n            var pos = i * 4;\r\n            var colorIndex = image.pixels[i];\r\n            var color = image.colorTable[colorIndex];\r\n            patchData[pos] = color[0];\r\n            patchData[pos + 1] = color[1];\r\n            patchData[pos + 2] = color[2];\r\n            patchData[pos + 3] =\r\n                colorIndex !== image.transparentIndex ? 255 : 0;\r\n        }\r\n        return patchData;\r\n    }\r\n};\r\nGIF.prototype.decompressFrames = function (buildPatch, startFrame, endFrame) {\r\n    if (startFrame === undefined) {\r\n        startFrame = 0;\r\n    }\r\n    if (endFrame === undefined) {\r\n        endFrame = this.raw.frames.length;\r\n    }\r\n    else {\r\n        endFrame = Math.min(endFrame, this.raw.frames.length);\r\n    }\r\n    var frames = [];\r\n    for (var i = startFrame; i < endFrame; i++) {\r\n        var frame = this.raw.frames[i];\r\n        if (frame.image) {\r\n            frames.push(this.decompressFrame(i, buildPatch));\r\n        }\r\n    }\r\n    return frames;\r\n};\r\nmodule.exports = GIF;\r\n//# sourceMappingURL=gif.js.map","\"use strict\";\r\nvar ByteStream = require('./bytestream');\r\nfunction DataParser(data) {\r\n    this.stream = new ByteStream(data);\r\n    this.output = {};\r\n}\r\nDataParser.prototype.parse = function (schema) {\r\n    this.parseParts(this.output, schema);\r\n    return this.output;\r\n};\r\nDataParser.prototype.parseParts = function (obj, schema) {\r\n    for (var i = 0; i < schema.length; i++) {\r\n        var part = schema[i];\r\n        this.parsePart(obj, part);\r\n    }\r\n};\r\nDataParser.prototype.parsePart = function (obj, part) {\r\n    var name = part.label;\r\n    var value;\r\n    if (part.requires && !part.requires(this.stream, this.output, obj)) {\r\n        return;\r\n    }\r\n    if (part.loop) {\r\n        var items = [];\r\n        while (part.loop(this.stream)) {\r\n            var item = {};\r\n            this.parseParts(item, part.parts);\r\n            items.push(item);\r\n        }\r\n        obj[name] = items;\r\n    }\r\n    else if (part.parts) {\r\n        value = {};\r\n        this.parseParts(value, part.parts);\r\n        obj[name] = value;\r\n    }\r\n    else if (part.parser) {\r\n        value = part.parser(this.stream, this.output, obj);\r\n        if (!part.skip) {\r\n            obj[name] = value;\r\n        }\r\n    }\r\n    else if (part.bits) {\r\n        obj[name] = this.parseBits(part.bits);\r\n    }\r\n};\r\nfunction bitsToNum(bitArray) {\r\n    return bitArray.reduce(function (s, n) { return s * 2 + n; }, 0);\r\n}\r\nDataParser.prototype.parseBits = function (details) {\r\n    var out = {};\r\n    var bits = this.stream.readBitArray();\r\n    for (var key in details) {\r\n        var item = details[key];\r\n        if (item.length) {\r\n            out[key] = bitsToNum(bits.slice(item.index, item.index + item.length));\r\n        }\r\n        else {\r\n            out[key] = bits[item.index];\r\n        }\r\n    }\r\n    return out;\r\n};\r\nmodule.exports = DataParser;\r\n//# sourceMappingURL=dataparser.js.map","\"use strict\";\r\nfunction ByteStream(data) {\r\n    this.data = data;\r\n    this.pos = 0;\r\n}\r\nByteStream.prototype.readByte = function () {\r\n    return this.data[this.pos++];\r\n};\r\nByteStream.prototype.peekByte = function () {\r\n    return this.data[this.pos];\r\n};\r\nByteStream.prototype.readBytes = function (n) {\r\n    return this.data.subarray(this.pos, this.pos += n);\r\n};\r\nByteStream.prototype.peekBytes = function (n) {\r\n    return this.data.subarray(this.pos, this.pos + n);\r\n};\r\nByteStream.prototype.readString = function (len) {\r\n    var str = '';\r\n    for (var i = 0; i < len; i++) {\r\n        str += String.fromCharCode(this.readByte());\r\n    }\r\n    return str;\r\n};\r\nByteStream.prototype.readBitArray = function () {\r\n    var arr = [];\r\n    var bite = this.readByte();\r\n    for (var i = 7; i >= 0; i--) {\r\n        arr.push(!!(bite & (1 << i)));\r\n    }\r\n    return arr;\r\n};\r\nByteStream.prototype.readUnsigned = function (littleEndian) {\r\n    var a = this.readBytes(2);\r\n    if (littleEndian) {\r\n        return (a[1] << 8) + a[0];\r\n    }\r\n    else {\r\n        return (a[0] << 8) + a[1];\r\n    }\r\n};\r\nmodule.exports = ByteStream;\r\n//# sourceMappingURL=bytestream.js.map","\"use strict\";\r\nvar Parsers = require(\"./parsers\");\r\nvar subBlocks = {\r\n    label: \"blocks\",\r\n    parser: function (stream) {\r\n        var views = [];\r\n        var total = 0;\r\n        var terminator = 0x00;\r\n        for (var size = stream.readByte(); size !== terminator; size = stream.readByte()) {\r\n            views.push(stream.readBytes(size));\r\n            total += size;\r\n        }\r\n        var out = new Uint8Array(total);\r\n        total = 0;\r\n        for (var i = 0; i < views.length; i++) {\r\n            out.set(views[i], total);\r\n            total += views[i].length;\r\n        }\r\n        return out;\r\n    }\r\n};\r\nvar gce = {\r\n    label: \"gce\",\r\n    requires: function (stream) {\r\n        var codes = stream.peekBytes(2);\r\n        return codes[0] === 0x21 && codes[1] === 0xf9;\r\n    },\r\n    parts: [\r\n        { label: \"codes\", parser: Parsers.readBytes(2), skip: true },\r\n        { label: \"byteSize\", parser: Parsers.readByte() },\r\n        {\r\n            label: \"extras\",\r\n            bits: {\r\n                future: { index: 0, length: 3 },\r\n                disposal: { index: 3, length: 3 },\r\n                userInput: { index: 6 },\r\n                transparentColorGiven: { index: 7 }\r\n            }\r\n        },\r\n        { label: \"delay\", parser: Parsers.readUnsigned(true) },\r\n        { label: \"transparentColorIndex\", parser: Parsers.readByte() },\r\n        { label: \"terminator\", parser: Parsers.readByte(), skip: true }\r\n    ]\r\n};\r\nvar image = {\r\n    label: \"image\",\r\n    requires: function (stream) {\r\n        var code = stream.peekByte();\r\n        return code === 0x2c;\r\n    },\r\n    parts: [\r\n        { label: \"code\", parser: Parsers.readByte(), skip: true },\r\n        {\r\n            label: \"descriptor\",\r\n            parts: [\r\n                { label: \"left\", parser: Parsers.readUnsigned(true) },\r\n                { label: \"top\", parser: Parsers.readUnsigned(true) },\r\n                { label: \"width\", parser: Parsers.readUnsigned(true) },\r\n                { label: \"height\", parser: Parsers.readUnsigned(true) },\r\n                {\r\n                    label: \"lct\",\r\n                    bits: {\r\n                        exists: { index: 0 },\r\n                        interlaced: { index: 1 },\r\n                        sort: { index: 2 },\r\n                        future: { index: 3, length: 2 },\r\n                        size: { index: 5, length: 3 }\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            label: \"lct\",\r\n            requires: function (stream, obj, parent) {\r\n                return parent.descriptor.lct.exists;\r\n            },\r\n            parser: Parsers.readArray(3, function (stream, obj, parent) {\r\n                return Math.pow(2, parent.descriptor.lct.size + 1);\r\n            })\r\n        },\r\n        {\r\n            label: \"data\",\r\n            parts: [\r\n                { label: \"minCodeSize\", parser: Parsers.readByte() },\r\n                subBlocks\r\n            ]\r\n        }\r\n    ]\r\n};\r\nvar text = {\r\n    label: \"text\",\r\n    requires: function (stream) {\r\n        var codes = stream.peekBytes(2);\r\n        return codes[0] === 0x21 && codes[1] === 0x01;\r\n    },\r\n    parts: [\r\n        { label: \"codes\", parser: Parsers.readBytes(2), skip: true },\r\n        { label: \"blockSize\", parser: Parsers.readByte() },\r\n        {\r\n            label: \"preData\",\r\n            parser: function (stream, obj, parent) {\r\n                return stream.readBytes(parent.text.blockSize);\r\n            }\r\n        },\r\n        subBlocks\r\n    ]\r\n};\r\nvar application = {\r\n    label: \"application\",\r\n    requires: function (stream, obj, parent) {\r\n        var codes = stream.peekBytes(2);\r\n        return codes[0] === 0x21 && codes[1] === 0xff;\r\n    },\r\n    parts: [\r\n        { label: \"codes\", parser: Parsers.readBytes(2), skip: true },\r\n        { label: \"blockSize\", parser: Parsers.readByte() },\r\n        {\r\n            label: \"id\",\r\n            parser: function (stream, obj, parent) {\r\n                return stream.readString(parent.blockSize);\r\n            }\r\n        },\r\n        subBlocks\r\n    ]\r\n};\r\nvar comment = {\r\n    label: \"comment\",\r\n    requires: function (stream, obj, parent) {\r\n        var codes = stream.peekBytes(2);\r\n        return codes[0] === 0x21 && codes[1] === 0xfe;\r\n    },\r\n    parts: [\r\n        { label: \"codes\", parser: Parsers.readBytes(2), skip: true },\r\n        subBlocks\r\n    ]\r\n};\r\nvar frames = {\r\n    label: \"frames\",\r\n    parts: [gce, application, comment, image, text],\r\n    loop: function (stream) {\r\n        var nextCode = stream.peekByte();\r\n        return nextCode === 0x21 || nextCode === 0x2c;\r\n    }\r\n};\r\nvar schemaGIF = [\r\n    {\r\n        label: \"header\",\r\n        parts: [\r\n            { label: \"signature\", parser: Parsers.readString(3) },\r\n            { label: \"version\", parser: Parsers.readString(3) }\r\n        ]\r\n    },\r\n    {\r\n        label: \"lsd\",\r\n        parts: [\r\n            { label: \"width\", parser: Parsers.readUnsigned(true) },\r\n            { label: \"height\", parser: Parsers.readUnsigned(true) },\r\n            {\r\n                label: \"gct\",\r\n                bits: {\r\n                    exists: { index: 0 },\r\n                    resolution: { index: 1, length: 3 },\r\n                    sort: { index: 4 },\r\n                    size: { index: 5, length: 3 }\r\n                }\r\n            },\r\n            { label: \"backgroundColorIndex\", parser: Parsers.readByte() },\r\n            { label: \"pixelAspectRatio\", parser: Parsers.readByte() }\r\n        ]\r\n    },\r\n    {\r\n        label: \"gct\",\r\n        requires: function (stream, obj) {\r\n            return obj.lsd.gct.exists;\r\n        },\r\n        parser: Parsers.readArray(3, function (stream, obj) {\r\n            return Math.pow(2, obj.lsd.gct.size + 1);\r\n        })\r\n    },\r\n    frames\r\n];\r\nmodule.exports = schemaGIF;\r\n//# sourceMappingURL=schema.js.map","\"use strict\";\r\nvar Parsers = {\r\n    readByte: function () {\r\n        return function (stream) {\r\n            return stream.readByte();\r\n        };\r\n    },\r\n    readBytes: function (length) {\r\n        return function (stream) {\r\n            return stream.readBytes(length);\r\n        };\r\n    },\r\n    readString: function (length) {\r\n        return function (stream) {\r\n            return stream.readString(length);\r\n        };\r\n    },\r\n    readUnsigned: function (littleEndian) {\r\n        return function (stream) {\r\n            return stream.readUnsigned(littleEndian);\r\n        };\r\n    },\r\n    readArray: function (size, countFunc) {\r\n        return function (stream, obj, parent) {\r\n            var count = countFunc(stream, obj, parent);\r\n            var arr = new Array(count);\r\n            for (var i = 0; i < count; i++) {\r\n                arr[i] = stream.readBytes(size);\r\n            }\r\n            return arr;\r\n        };\r\n    }\r\n};\r\nmodule.exports = Parsers;\r\n//# sourceMappingURL=parsers.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.VFXImg = void 0;\r\nconst React = __importStar(require(\"react\"));\r\nconst react_1 = require(\"react\");\r\nconst context_1 = require(\"./context\");\r\nexports.VFXImg = props => {\r\n    const player = react_1.useContext(context_1.VFXContext);\r\n    const ref = react_1.useRef(null);\r\n    const init = react_1.useCallback(() => {\r\n        if (ref.current === null) {\r\n            return;\r\n        }\r\n        const shader = props.shader;\r\n        const release = props.release;\r\n        const uniforms = props.uniforms;\r\n        player === null || player === void 0 ? void 0 : player.addElement(ref.current, { shader, uniforms, release });\r\n        return () => {\r\n            if (ref.current === null) {\r\n                return;\r\n            }\r\n            player === null || player === void 0 ? void 0 : player.removeElement(ref.current);\r\n        };\r\n    }, [props.shader, player]);\r\n    return React.createElement(\"img\", Object.assign({ ref: ref }, props, { onLoad: init }));\r\n};\r\n//# sourceMappingURL=image.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.VFXVideo = void 0;\r\nconst React = __importStar(require(\"react\"));\r\nconst react_1 = require(\"react\");\r\nconst context_1 = require(\"./context\");\r\nexports.VFXVideo = props => {\r\n    const player = react_1.useContext(context_1.VFXContext);\r\n    const ref = react_1.useRef(null);\r\n    const onLoadedData = react_1.useCallback(() => {\r\n        if (ref.current === null) {\r\n            return;\r\n        }\r\n        const shader = props.shader;\r\n        const release = props.release;\r\n        const uniforms = props.uniforms;\r\n        player === null || player === void 0 ? void 0 : player.addElement(ref.current, { shader, uniforms, release });\r\n        return () => {\r\n            if (ref.current === null) {\r\n                return;\r\n            }\r\n            player === null || player === void 0 ? void 0 : player.removeElement(ref.current);\r\n        };\r\n    }, [props.shader, player]);\r\n    return React.createElement(\"video\", Object.assign({ ref: ref }, props, { onLoadedData: onLoadedData }));\r\n};\r\n//# sourceMappingURL=video.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst React = __importStar(require(\"react\"));\r\nconst react_1 = require(\"react\");\r\nconst context_1 = require(\"./context\");\r\nfunction VFXElementFactory(type) {\r\n    const VFXElement = (props) => {\r\n        const player = react_1.useContext(context_1.VFXContext);\r\n        const ref = react_1.useRef(null);\r\n        react_1.useEffect(() => {\r\n            const element = ref.current;\r\n            if (element === null) {\r\n                return;\r\n            }\r\n            const shader = props.shader;\r\n            const release = props.release;\r\n            const uniforms = props.uniforms;\r\n            player === null || player === void 0 ? void 0 : player.addElement(element, { shader, uniforms, release });\r\n            return () => {\r\n                player === null || player === void 0 ? void 0 : player.removeElement(element);\r\n            };\r\n        }, [ref, player, props.shader, props.release, props.uniforms]);\r\n        react_1.useEffect(() => {\r\n            if (ref.current === null) {\r\n                return;\r\n            }\r\n            player === null || player === void 0 ? void 0 : player.updateElement(ref.current);\r\n        }, [player, props.children]);\r\n        return React.createElement(type, Object.assign(Object.assign({}, props), { ref }));\r\n    };\r\n    return VFXElement;\r\n}\r\nexports.default = VFXElementFactory;\r\n//# sourceMappingURL=element.js.map","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.VFXP = exports.VFXDiv = exports.VFXSpan = void 0;\r\nvar provider_1 = require(\"./provider\");\r\nObject.defineProperty(exports, \"VFXProvider\", { enumerable: true, get: function () { return provider_1.VFXProvider; } });\r\nvar image_1 = require(\"./image\");\r\nObject.defineProperty(exports, \"VFXImg\", { enumerable: true, get: function () { return image_1.VFXImg; } });\r\nvar video_1 = require(\"./video\");\r\nObject.defineProperty(exports, \"VFXVideo\", { enumerable: true, get: function () { return video_1.VFXVideo; } });\r\nconst element_1 = __importDefault(require(\"./element\"));\r\nexports.VFXSpan = element_1.default(\"span\");\r\nexports.VFXDiv = element_1.default(\"div\");\r\nexports.VFXP = element_1.default(\"p\");\r\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}